import Vue from 'vue'

const transformName = (string) => string.replace(/\s+/g, '-').toLowerCase()

// install function executed by Vue.use()
// eslint-disable-next-line max-len
const install = function installNujek(vueInstance, settings) {
  if (install.installed) return

  install.installed = true

  // eslint-disable-next-line no-param-reassign
  vueInstance.prototype.$nujek = true

  if (!settings) {
    return
  }

  const { modsName = 'mods', propName = 'fixedClasses' } = settings

  Vue.mixin({
    // Dependency injection forces us to explicitly require that function
    provide: {
      [modsName](baseClass) {
        baseClass = baseClass || transformName(this.$options.name)
        return (this[propName] || []).map((type) => `${baseClass}--${type}`)
      }
    },
    props: {
      // Prop name is now dynamic and allows to avoid conflits
      [propName]: {
        type: Array,
        default: () => []
      }
    }
  })

  // Object.keys(settings).forEach((componentName) => {
  //   const componentSettings = settings[componentName]

  //   if (
  //     typeof componentSettings === 'function' &&
  //     typeof componentSettings.extend !== undefined
  //   ) {
  //     const component = componentSettings
  //     vueInstance.component(componentName, configure(component))
  //     return
  //   }

  //   const { component, props } = componentSettings

  //   vueInstance.component(
  //     componentName.replace('nj', 'n'),
  //     configure(component, props)
  //   )
  // })
}

// Create module definition for Vue.use()
const plugin = {
  install
}

// Default export is library as a whole, registered via Vue.use()
export default plugin
